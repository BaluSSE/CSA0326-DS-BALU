#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_VERTICES 100


int minDistance(int dist[], bool visited[], int numVertices) {
    int min = INT_MAX, min_index = -1;

    for (int v = 0; v < numVertices; v++) {
        if (!visited[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }

    return min_index;
}


void printPath(int parent[], int j) {
    if (parent[j] == -1) {
        printf("%d ", j);
        return;
    }
    printPath(parent, parent[j]);
    printf("%d ", j);
}


void printSolution(int dist[], int parent[], int src, int numVertices) {
    printf("Vertex\tDistance\tPath\n");
    for (int i = 0; i < numVertices; i++) {
        printf("%d\t%d\t\t", i, dist[i]);
        printPath(parent, i);
        printf("\n");
    }
}


void dijkstra(int graph[MAX_VERTICES][MAX_VERTICES], int src, int numVertices) {
    int dist[MAX_VERTICES]; // Holds the shortest distance from src to i
    bool visited[MAX_VERTICES]; // True if vertex i is included in shortest path tree
    int parent[MAX_VERTICES]; // Array to store the shortest path tree

    // Initialize dist[], visited[], and parent[]
    for (int i = 0; i < numVertices; i++) {
        dist[i] = INT_MAX;
        visited[i] = false;
        parent[src] = -1;
    }

    dist[src] = 0; // Distance from source vertex to itself is 0

    for (int count = 0; count < numVertices - 1; count++) {
        int u = minDistance(dist, visited, numVertices);
        visited[u] = true;

        for (int v = 0; v < numVertices; v++) {
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
                parent[v] = u;
            }
        }
    }

    printSolution(dist, parent, src, numVertices);
}

int main() {
    int numVertices = 9;
    int graph[MAX_VERTICES][MAX_VERTICES] = {
        {0, 4, 0, 0, 0, 0, 0, 8, 0},
        {4, 0, 8, 0, 0, 0, 0, 11, 0},
        {0, 8, 0, 7, 0, 4, 0, 0, 2},
        {0, 0, 7, 0, 9, 14, 0, 0, 0},
        {0, 0, 0, 9, 0, 10, 0, 0, 0},
        {0, 0, 4, 14, 10, 0, 2, 0, 0},
        {0, 0, 0, 0, 0, 2, 0, 1, 6},
        {8, 11, 0, 0, 0, 0, 1, 0, 7},
        {0, 0, 2, 0, 0, 0, 6, 7, 0}
    };

    dijkstra(graph, 0, numVertices);

    return 0;
}
