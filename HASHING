#include <stdio.h>
#include <stdbool.h>

#define TABLE_SIZE 10


int hash(int key) {
    return key % TABLE_SIZE;
}


struct HashTable {
    int data[TABLE_SIZE];
    bool isOccupied[TABLE_SIZE];
};


void initialize(struct HashTable* table) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        table->data[i] = -1;
        table->isOccupied[i] = false;
    }
}


void insert(struct HashTable* table, int key) {
    int index = hash(key);

    while (table->isOccupied[index]) {
        index = (index + 1) % TABLE_SIZE;
    }

    table->data[index] = key;
    table->isOccupied[index] = true;
}

bool search(struct HashTable* table, int key) {
    int index = hash(key);

    while (table->isOccupied[index]) {
        if (table->data[index] == key) {
            return true;
        }
        index = (index + 1) % TABLE_SIZE;
    }

    return false;
}

void display(struct HashTable* table) {
    printf("Hash Table contents:\n");
    for (int i = 0; i < TABLE_SIZE; i++) {
        if (table->isOccupied[i]) {
            printf("Index %d: %d\n", i, table->data[i]);
        } else {
            printf("Index %d: Empty\n", i);
        }
    }
}

int main() {
    struct HashTable hashTable;
    initialize(&hashTable);

    insert(&hashTable, 12);
    insert(&hashTable, 25);
    insert(&hashTable, 37);
    insert(&hashTable, 48);

    display(&hashTable);

    int searchKey = 25;
    if (search(&hashTable, searchKey)) {
        printf("%d found in the hash table.\n", searchKey);
    } else {
        printf("%d not found in the hash table.\n", searchKey);
    }

    return 0;
}
