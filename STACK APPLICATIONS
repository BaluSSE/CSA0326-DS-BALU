#include <stdio.h>
#include <stdbool.h>
#include <string.h>

#define MAX_SIZE 100


struct Stack {
    char data[MAX_SIZE];
    int top;
};


void initialize(struct Stack* stack) {
    stack->top = -1;
}

bool isEmpty(struct Stack* stack) {
    return stack->top == -1;
}


bool isFull(struct Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

void push(struct Stack* stack, char value) {
    if (isFull(stack)) {
        printf("Stack overflow\n");
        return;
    }

    stack->data[++stack->top] = value;
}

char pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        return '\0';  // Return a null character to indicate underflow
    }

    return stack->data[stack->top--];
}

bool areParenthesesBalanced(const char* expression) {
    struct Stack stack;
    initialize(&stack);

    for (int i = 0; expression[i] != '\0'; i++) {
        if (expression[i] == '(' || expression[i] == '[' || expression[i] == '{') {
            push(&stack, expression[i]);
        } else if (expression[i] == ')' || expression[i] == ']' || expression[i] == '}') {
            char top = pop(&stack);
            if (top == '\0') {
                return false;  // Unbalanced closing parenthesis
            }

            if ((expression[i] == ')' && top != '(') ||
                (expression[i] == ']' && top != '[') ||
                (expression[i] == '}' && top != '{')) {
                return false;  // Mismatched parenthesis
            }
        }
    }

    return isEmpty(&stack);  // True if stack is empty at the end
}

int main() {
    const char* expression = "{[()]}";
    if (areParenthesesBalanced(expression)) {
        printf("Parentheses are balanced.\n");
    } else {
        printf("Parentheses are not balanced.\n");
    }

    return 0;
}
